class Solution {
    private void backTrack(List<List<Integer>> res, List<Integer> path,int[]  candidates, int start, int val) {
        if (val == 0) {
            res.add(new ArrayList<>(path));
            return;
        }
        if (val < 0) {
            return;
        }
        for (int i = start; i < candidates.length; i++) {
            if (i > start && candidates[i] == candidates[i-1]) {
                continue;
            }
            path.add(candidates[i]);
            backTrack(res, path, candidates, i + 1, val - candidates[i]);
            path.remove(path.size()-1);
        }
    }
    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
        Arrays.sort(candidates);
        List<List<Integer>> res = new ArrayList<>();
        backTrack(res, new ArrayList<>(), candidates, 0, target);
        return res;
    }
}
